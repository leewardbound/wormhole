schema {
  query: Query
  mutation: Mutation
}

scalar DateTime

type Error {
  message: String!
}

scalar JSONString

union LogoutResult = LogoutSuccess | Error

type LogoutSuccess {
  success: Boolean
}

type Mutation {
  tokenAuth(password: String!, username_Iexact: String!): TokenAuthResult
  sendPasswordResetEmail(email: String!): SendPasswordResetEmailResult
  passwordReset(newPassword1: String!, newPassword2: String!, token: String!): PasswordResetResult
  logout: LogoutResult
  updateUserProfile(input: UpdateUserProfileInput): UpdateUserProfileResult
  registerBusiness(input: RegisterInput): RegisterResult
}

union PasswordResetResult = PasswordResetSuccess | Error

type PasswordResetSuccess {
  success: Boolean
}

type Proposal {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  contractAddress: String!
  fromTxHash: String!
  blockNumber: Int!
  blockTimestamp: DateTime!
  proposalId: Int!
  description: String!
  proposer: String!
  startBlock: Int!
  endBlock: Int!
  originalEventData: JSONString!
  votes: [ProposalVote!]!
}

input ProposalFilterSetInput {
  contractAddress: String
  fromTxHash: String
  blockNumber: String
  blockNumber_Lte: String
  blockNumber_Gte: String
  blockTimestamp: String
  blockTimestamp_Lte: String
  blockTimestamp_Gte: String
  proposalId: String
  description: String
  description_Icontains: String
  proposer: String
  startBlock: String
  startBlock_Lte: String
  startBlock_Gte: String
  endBlock: String
  endBlock_Lte: String
  endBlock_Gte: String
}

type ProposalVote {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime!
  proposal: Proposal!
  fromTxHash: String!
  blockNumber: Int!
  blockTimestamp: DateTime!
  reason: String!
  support: Int!
  voter: String!
  votes: Int!
  originalEventData: JSONString!
}

input ProposalVoteFilterSetInput {
  proposal_ProposalId: String
  voter: String
  support: String
}

type Query {
  proposals(filters: ProposalFilterSetInput): [Proposal]
  votes(filters: ProposalVoteFilterSetInput): [ProposalVote]
  myProfile: UserProfile
}

input RegisterInput {
  email: String!
  password: String!
  passwordConfirm: String!
  firstName: String!
  lastName: String!
}

union RegisterResult = RegisterSuccess | Error

type RegisterSuccess {
  user: UserProfile
}

union SendPasswordResetEmailResult = SendPasswordResetEmailSuccess | Error

type SendPasswordResetEmailSuccess {
  success: Boolean
}

union TokenAuthResult = TokenAuthSuccess | Error

type TokenAuthSuccess {
  token: String
  refreshToken: String
  user: UserProfile
}

scalar UUID

input UpdateUserProfileInput {
  firstName: String
  lastName: String
  email: String
}

union UpdateUserProfileResult = UpdateUserProfileSuccess | Error

type UpdateUserProfileSuccess {
  user: UserProfile
}

type UserProfile {
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  isStaff: Boolean!
  id: String!
}
